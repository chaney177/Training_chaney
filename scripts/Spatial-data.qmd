---
title: "Spatial_Data"
format: html
---
## About the Data
```{r}
knb_url <- "https://dev.nceas.ucsb.edu/knb/d1/mn/v2/object/urn%3Auuid%3Aaceaecb2-1ce0-4d41-a839-d3607d32bb58"

download.file(url = knb_url, destfile = 'shapefile_demo_data.zip')

unzip('shapefile_demo_data.zip', exdir = 'data')

file.remove('shapefile_demo_data.zip')
```

```{r}
#call the R packages
library(readr)
library(sf)
library(ggplot2)
library(leaflet)
library(scales)
library(ggspatial)
library(dplyr)
```
# Explore the data
```{r}
#read in shapefile using read sf()

ak_regions<- read_sf("data/ak_regions_simp.shp")

# quick plot
plot(ak_regions)
```
```{r}
class(ak_regions)
```

```{r}
head(ak_regions)
```

```{r}
glimpse(ak_regions)
```

# CRS- Coordinate Reference System

```{r}
st_crs(ak_regions)
```

```{r}
ak_regions_3338<- ak_regions %>% 
  ## Transforming for AK Albers for better AK spatial projection
  st_transform(crs=3338)
st_crs(ak_regions_3338)

plot(ak_regions_3338)
```
## SF & the Tidyverse

```{r}
colnames(ak_regions_3338)

```

```{r}
ak_regions_3338 %>% select(region)


```

```{r}
unique(ak_regions_3338$region)
```

```{r}
ak_regions_3338 %>% filter(region == "Southeast")
```

## Spatial Joins

##Read in Population Data

```{r}
pop<- read_csv("data/alaska_population.csv")

```
# Utilizing Lat/ Long in data frame before transforming into SF. Assuming that lat/long are in WS 84 (code- 4326)

```{r}
#convert pop data to sf object
pop_4326<- st_as_sf(pop, coords= c('lng', 'lat'), crs= 4326, 
                    #ensures that we retain our OG lat and lang columns
                    remove= F)
head(pop_4326)
```
# Join Population Data with AK Regions

```{r}
#we want to find out which region each city falls within
## pop_joined<- st_join(pop_4326,ak_regions_3338, join = st_within) -- won't work because CRS needs to be the same

```

```{r}
#getting them on same CRS by projecting pop data into AK albers
pop_3338<- st_transform(pop_4326, crs=3338)
```

```{r}
pop_joined<- st_join(pop_3338,ak_regions_3338, join = st_within)

head(pop_joined)
```

## Calculate the total population by region

```{r}
pop_region<- pop_joined %>% 
  #get rid of sticky geometry column
  as.data.frame() %>% group_by(region) %>%
    summarise(total_pop = sum(population))

head(pop_region)
```

```{r}
#use leftjoin to get info back to the AK region shape file

pop_region_3338<- left_join(ak_regions_3338, pop_region, by="region")

#plot to check
plot(pop_region_3338["total_pop"])
```
```{r}
#calculate pop by mgmt area
pop_mgmt_3338<- pop_region_3338 %>% group_by(mgmt_area) %>% summarise(total_pop= sum(total_pop))

plot(pop_mgmt_3338["total_pop"])
```
## Save the spatial object

```{r}
write_sf(pop_region_3338,"data/ak_regions_populations.shp")
```


# Visualise with GGPplot

```{r}
ggplot(data=pop_region_3338)+
  geom_sf(aes(fill=total_pop))+ 
  labs(fill="Total Population") +
  scale_fill_continuous(low="khaki", high= "firebrick", labels=comma)+theme_bw()

```
```{r}
#get the rivers
rivers_3338<- read_sf("data/ak_rivers_simp.shp")

st_crs(rivers_3338)
```

```{r}
ggplot() + 
  #add population by region
geom_sf(data = pop_region_3338, 
            aes(fill = total_pop)) +
  #add cities
    geom_sf(data = pop_3338, 
            size = 0.5) +
  #add rivers
    geom_sf(data = rivers_3338,
            aes(linewidth = StrOrder)) +
    scale_linewidth(range = c(0.05, 0.5), 
                    guide = "none") +
    labs(title = "Total Population by Alaska Region",
         fill = "Total Population") +
    scale_fill_continuous(low = "khaki",
                          high =  "firebrick",
                          labels = comma) +
    theme_bw() 
```
#### Using ggspatial
```{r}
#reproject our pop data into OpenStreetMap Projection (Pseudo- Mercator)= 3857
pop_3857<- st_transform(pop_3338, crs= 3857)

ggplot(data = pop_3857) +
    ggspatial::annotation_map_tile(type = "osm", zoom = 4) + # higher zoom values are more detailed 
    geom_sf(aes(color = population),
            fill = NA) +
    scale_color_continuous(low = "darkkhaki",
                           high =  "firebrick",
                           labels = comma)
```

## Using Leaflet

```{r}
#Changing back to 4326
pop_region_4326<- pop_region_3338 %>% 
  st_transform(crs= 4326)
```


```{r}
epsg3338 <- leaflet::leafletCRS(
    crsClass = "L.Proj.CRS",
    code = "EPSG:3338",
    proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
    resolutions = 2 ^ (16:7)
)
```

```{r}
m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(data = pop_region_4326,
                fillColor = "gray",
                weight = 1)
m
```

```{r}
pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1,
        label = ~ region
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m

```

```{r}
pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1
    ) %>%
    addCircleMarkers(
        data = pop_4326,
        lat = ~ lat,
        lng = ~ lng,
        radius = ~ log(population / 500),
        # arbitrary scaling
        fillColor = "gray",
        fillOpacity = 1,
        weight = 0.25,
        color = "black",
        label = ~ paste0(pop_4326$city, ", population ", comma(pop_4326$population))
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m
```

